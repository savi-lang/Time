:module _FFI
  :: C function used to get the current time on MacOS.
  :ffi gettimeofday(
    time_pair_out CPointer(Pair(U64, U64))
    time_zone_out CPointer(Pair(I32, I32))
  ) I32

  :: C function used to get the current time on non-MacOS POSIX platforms.
  :ffi clock_gettime(
    clock_id U32
    time_pair_out CPointer(Pair(USize, USize))
  ) I32

  :: C function used to get the system uptime ticks on MacOS.
  :ffi mach_absolute_time U64

  :: C function used to get the numerator and denominator for ticks on MacOS.
  :ffi mach_timebase_info(out CPointer(Pair(U32, U32))) I32

  :: Wrapper for C functions used to get subsecond values on Windows.
  :fun windows_subseconds(factor U64)
    freq = @_windows_perf_freq
    if (freq <= factor) (
      @_windows_perf_counter * (factor / freq)
    |
      (@_windows_perf_counter * factor) / freq
    )

  :: C function used to get the performance counter value on Windows.
  :ffi _windows_query_perf_counter(out CPointer(Pair(U32, U32))) Bool
    :foreign_name QueryPerformanceCounter
  :fun _windows_perf_counter U64
    :inline always
    pair = Pair(U32, U32).new(0, 0)
    @_windows_query_perf_counter(stack_address_of_variable pair)
    pair.first.u64.bit_or(pair.last.u64.bit_shl(32))

  :: C function used to get the performance counter frequency on Windows.
  :ffi _windows_query_perf_freq(out CPointer(Pair(U32, U32))) Bool
    :foreign_name QueryPerformanceFrequency
  :fun _windows_perf_freq U64
    :inline always
    pair = Pair(U32, U32).new(0, 0)
    @_windows_query_perf_freq(stack_address_of_variable pair)
    pair.first.u64.bit_or(pair.last.u64.bit_shl(32))

  :: C function used to get the current system wall clock time on Windows.
  :ffi windows_system_time(out CPointer(Pair(U32, U32))) None
    :foreign_name GetSystemTimeAsFileTime

:: Clock IDs to use when calling `_FFI.clock_gettime`.
:module _FFI.ClockType
  :fun real_time U32: 0
  :fun monotonic U32: if Platform.is_linux (1 | 4)
