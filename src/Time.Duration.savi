:struct val Time.Duration
  :is Comparable(Time.Duration)

  :: The total number of seconds in the duration.
  :let total_seconds U64
  :: The number of nanoseconds past the second.
  :let nanosecond U32

  :: An internal-only direct constructor.
  :new val _new(@total_seconds, @nanosecond)

  :: The maximum duration representable by this data type.
  :fun non max_value: @_new(U64.max_value, Time._nanoseconds_per_second - 1)

  :: The minimum duration representable by this data type (a.k.a `zero`).
  :fun non min_value: @_new(0, 0)

  :: A duration of zero length.
  :fun non zero: @_new(0, 0)

  :: Represent a duration of the given number of nanoseconds.
  :new nanoseconds(n U64):
    if (n < 1000000000) (
      @total_seconds = 0
      @nanosecond = n.u32
    |
      @total_seconds = n / 1000000000
      @nanosecond = (n % 1000000000).u32
    )

  :: Represent a duration of the given number of microseconds.
  :new microseconds(n U64)
    if (n < 1000000) (
      @total_seconds = 0
      @nanosecond = n.u32 * 1000
    |
      @total_seconds = n / 1000000
      @nanosecond = (n % 1000000).u32 * 1000
    )

  :: Represent a duration of the given number of milliseconds.
  :new milliseconds(n U64)
    if (n < 1000) (
      @total_seconds = 0
      @nanosecond = n.u32 * 1000000
    |
      @total_seconds = n / 1000
      @nanosecond = (n % 1000).u32 * 1000000
    )

  :: Represent a duration of the given number of seconds.
  :new seconds(n)
    @total_seconds = n
    @nanosecond = 0

  :: Represent a duration of the given number of minutes.
  :new minutes(n)
    @total_seconds = Time._seconds_per_minute * n
    @nanosecond = 0

  :: Represent a duration of the given number of hours.
  :new hours(n)
    @total_seconds = Time._seconds_per_hour * n
    @nanosecond = 0

  :: Represent a duration of the given number of days.
  ::
  :: Assumes ideal days (24 hours, 60 minutes per hour, 60 seconds per minute).
  :new days(n)
    @total_seconds = Time._seconds_per_day * n
    @nanosecond = 0

  :: Represent a duration of the given number of 7-day weeks.
  ::
  :: Assumes ideal days (24 hours, 60 minutes per hour, 60 seconds per minute).
  :new weeks(n)
    @total_seconds = Time._seconds_per_day * 7 * n
    @nanosecond = 0

  :: Return the total number of complete weeks in the duration.
  :: That is, if precision is lost, the result is rounded down.
  ::
  :: Assumes ideal days (24 hours, 60 minutes per hour, 60 seconds per minute).
  :fun total_weeks: @total_seconds / (Time._seconds_per_day * 7)

  :: Return the total number of complete days in the duration.
  :: That is, if precision is lost, the result is rounded down.
  ::
  :: Assumes ideal days (24 hours, 60 minutes per hour, 60 seconds per minute).
  :fun total_days: @total_seconds / Time._seconds_per_day

  :: Return the total number of complete hours in the duration.
  :: That is, if precision is lost, the result is rounded down.
  :fun total_hours: @total_seconds / Time._seconds_per_hour

  :: Return the total number of complete minutes in the duration.
  :: That is, if precision is lost, the result is rounded down.
  :fun total_minutes: @total_seconds / Time._seconds_per_minute

  :: Return the total number of complete milliseconds in the duration.
  :: That is, if precision is lost, the result is rounded down.
  ::
  :: Raises an error if the result would be higher than `U64.max_value`.
  :fun total_milliseconds!
    (@total_seconds *! 1000) +! (@nanosecond / 1000000).u64

  :: Return the total number of complete microseconds in the duration.
  :: That is, if precision is lost, the result is rounded down.
  ::
  :: Raises an error if the result would be higher than `U64.max_value`.
  :fun total_microseconds!
    (@total_seconds *! 1000000) +! (@nanosecond / 1000).u64

  :: Return the total number of nanoseconds in the duration.
  ::
  :: Raises an error if the result would be higher than `U64.max_value`.
  :fun total_nanoseconds!
    (@total_seconds *! 1000000000) +! @nanosecond.u64

  :: Return the total number of complete weeks in the duration.
  :: The remainder of the duration (beyond those weeks) is also returned.
  ::
  :: Assumes ideal days (24 hours, 60 minutes per hour, 60 seconds per minute).
  :fun total_weeks_with_remainder
    Pair(U64, Time.Duration).new(
      @total_seconds / (Time._seconds_per_day * 7)
      @_new(
        @total_seconds % (Time._seconds_per_day * 7)
        @nanosecond
      )
    )

  :: Return the total number of complete days in the duration.
  :: The remainder of the duration (beyond those days) is also returned.
  ::
  :: Assumes ideal days (24 hours, 60 minutes per hour, 60 seconds per minute).
  :fun total_days_with_remainder
    Pair(U64, Time.Duration).new(
      @total_seconds / Time._seconds_per_day
      @_new(
        @total_seconds % Time._seconds_per_day
        @nanosecond
      )
    )

  :: Return the total number of complete hours in the duration.
  :: The remainder of the duration (beyond those hours) is also returned.
  :fun total_hours_with_remainder
    Pair(U64, Time.Duration).new(
      @total_seconds / Time._seconds_per_hour
      @_new(
        @total_seconds % Time._seconds_per_hour
        @nanosecond
      )
    )

  :: Return the total number of complete minutes in the duration.
  :: The remainder of the duration (beyond those minutes) is also returned.
  :fun total_minutes_with_remainder
    Pair(U64, Time.Duration).new(
      @total_seconds / Time._seconds_per_minute
      @_new(
        @total_seconds % Time._seconds_per_minute
        @nanosecond
      )
    )

  :: Print the duration for human inspection (the format is subject to change).
  :fun inspect_into(output String'ref) None
    weeks_result = @total_weeks_with_remainder
    days_result = weeks_result.tail.total_days_with_remainder
    hours_result = days_result.tail.total_hours_with_remainder
    minutes_result = hours_result.tail.total_minutes_with_remainder

    weeks = weeks_result.head
    days = days_result.head
    hours = hours_result.head
    minutes = minutes_result.head
    seconds = minutes_result.tail.total_seconds
    nanoseconds = minutes_result.tail.nanosecond

    printed_anything = False
    output << "Time.Duration("

    if (weeks > 0) (
      Inspect.into(output, weeks), output << " weeks"
      printed_anything = True
    )

    if (days > 0) (
      if printed_anything (output << ", ")
      Inspect.into(output, days), output << " days"
      printed_anything = True
    )

    if (hours > 0) (
      if printed_anything (output << ", ")
      Inspect.into(output, hours), output << " hours"
      printed_anything = True
    )

    if (minutes > 0) (
      if printed_anything (output << ", ")
      Inspect.into(output, minutes), output << " minutes"
      printed_anything = True
    )

    if (seconds > 0) (
      if printed_anything (output << ", ")
      Inspect.into(output, seconds), output << " seconds"
      printed_anything = True
    )

    if (nanoseconds > 0) (
      if printed_anything (output << ", ")
      Inspect.into(output, nanoseconds), output << " nanoseconds"
      printed_anything = True
    )

    output << ")"

  :: Return True if the given duration is exactly equivalent to this one.
  :fun "=="(other Time.Duration'box)
    @total_seconds == other.total_seconds
    && @nanosecond == other.nanosecond

  :: Return True if the given duration is less than (earlier than) this one.
  :fun "<"(other Time.Duration'box)
    @total_seconds < other.total_seconds
    || (@total_seconds == other.total_seconds && @nanosecond < other.nanosecond)

  :: Return True if the given duration is greater than (later than) this one.
  :fun ">"(other Time.Duration'box)
    @total_seconds > other.total_seconds
    || (@total_seconds == other.total_seconds && @nanosecond > other.nanosecond)

  :: Add the given duration to this one and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use the `+!` method instead.
  :fun "+"(other Time.Duration'box)
    total = @total_seconds + other.total_seconds
    nanos = @nanosecond + other.nanosecond
    while (nanos >= Time._nanoseconds_per_second) (
      nanos -= Time._nanoseconds_per_second
      total += 1
    )
    @_new(total, nanos)

  :: Add the given duration to this one and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow semantics are desired, use the `+` method instead.
  :fun "+!"(other Time.Duration'box)
    total = @total_seconds +! other.total_seconds
    nanos = @nanosecond + other.nanosecond
    while (nanos >= Time._nanoseconds_per_second) (
      nanos -= Time._nanoseconds_per_second
      total = total +! 1
    )
    @_new(total, nanos)

  :: Subtract the given duration from this one and return the result.
  ::
  :: Uses wrap-around underflow semantics if the result is less than `zero`.
  :: If an error on underflow is desired, use the `-!` method instead.
  :fun "-"(other Time.Duration'box)
    total = @total_seconds, other_total = other.total_seconds
    nanos = @nanosecond,    other_nanos = other.nanosecond
    while (nanos < other_nanos) (
      nanos += Time._nanoseconds_per_second
      total -= 1
    )
    @_new(total - other_total, nanos - other_nanos)

  :: Subtract the given duration from this one and return the result.
  ::
  :: Raises an error if the result would be less than `zero`.
  :: If wrap-around underflow semantics is desired, use the `-` method instead.
  :fun "-!"(other Time.Duration'box)
    total = @total_seconds, other_total = other.total_seconds
    nanos = @nanosecond,    other_nanos = other.nanosecond
    while (nanos < other_nanos) (
      nanos += Time._nanoseconds_per_second
      total = total -! 1
    )
    @_new(total -! other_total, nanos - other_nanos)

  :: Add the given number of weeks to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_weeks!` instead.
  :fun plus_weeks(n)
    @_new(
      @total_seconds + Time._seconds_per_day * 7 * n
      @nanosecond
    )

  :: Add the given number of weeks to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_weeks` instead.
  :fun plus_weeks!(n)
    @_new(
      @total_seconds +! Time._seconds_per_day * 7 *! n
      @nanosecond
    )

  :: Add the given number of days to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_days!` instead.
  :fun plus_days(n)
    @_new(
      @total_seconds + Time._seconds_per_day * n
      @nanosecond
    )

  :: Add the given number of days to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_days` instead.
  :fun plus_days!(n)
    @_new(
      @total_seconds +! Time._seconds_per_day *! n
      @nanosecond
    )

  :: Add the given number of hours to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_hours!` instead.
  :fun plus_hours(n)
    @_new(
      @total_seconds + Time._seconds_per_hour * n
      @nanosecond
    )

  :: Add the given number of hours to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_hours` instead.
  :fun plus_hours!(n)
    @_new(
      @total_seconds +! Time._seconds_per_hour *! n
      @nanosecond
    )

  :: Add the given number of minutes to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_minutes!` instead.
  :fun plus_minutes(n)
    @_new(
      @total_seconds + Time._seconds_per_minute * n
      @nanosecond
    )

  :: Add the given number of minutes to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_minutes` instead.
  :fun plus_minutes!(n)
    @_new(
      @total_seconds +! Time._seconds_per_minute *! n
      @nanosecond
    )

  :: Add the given number of seconds to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_seconds!` instead.
  :fun plus_seconds(n)
    @_new(
      @total_seconds + n
      @nanosecond
    )

  :: Add the given number of seconds to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_seconds` instead.
  :fun plus_seconds!(n)
    @_new(
      @total_seconds +! n
      @nanosecond
    )

  :: Add the given milliseconds to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_milliseconds!` instead.
  :fun plus_milliseconds(n): @ + @milliseconds(n)

  :: Add the given milliseconds to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_milliseconds` instead.
  :fun plus_milliseconds!(n): @ +! @milliseconds(n)

  :: Add the given microseconds to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_microseconds!` instead.
  :fun plus_microseconds(n): @ + @microseconds(n)

  :: Add the given microseconds to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_microseconds` instead.
  :fun plus_microseconds!(n): @ +! @microseconds(n)

  :: Add the given nanoseconds to this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `plus_nanoseconds!` instead.
  :fun plus_nanoseconds(n): @ + @nanoseconds(n)

  :: Add the given nanoseconds to this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `plus_nanoseconds` instead.
  :fun plus_nanoseconds!(n): @ +! @nanoseconds(n)

  :: Subtract the given weeks from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_weeks!` instead.
  :fun minus_weeks(n): @ - @weeks(n)

  :: Subtract the given weeks from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_weeks` instead.
  :fun minus_weeks!(n): @ -! @weeks(n)

  :: Subtract the given days from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_days!` instead.
  :fun minus_days(n): @ - @days(n)

  :: Subtract the given days from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_days` instead.
  :fun minus_days!(n): @ -! @days(n)

  :: Subtract the given hours from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_hours!` instead.
  :fun minus_hours(n): @ - @hours(n)

  :: Subtract the given hours from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_hours` instead.
  :fun minus_hours!(n): @ -! @hours(n)

  :: Subtract the given minutes from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_minutes!` instead.
  :fun minus_minutes(n): @ - @minutes(n)

  :: Subtract the given minutes from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_minutes` instead.
  :fun minus_minutes!(n): @ -! @minutes(n)

  :: Subtract the given seconds from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_seconds!` instead.
  :fun minus_seconds(n): @ - @seconds(n)

  :: Subtract the given seconds from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_seconds` instead.
  :fun minus_seconds!(n): @ -! @seconds(n)

  :: Subtract the given milliseconds from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_milliseconds!` instead.
  :fun minus_milliseconds(n): @ - @milliseconds(n)

  :: Subtract the given milliseconds from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_milliseconds` instead.
  :fun minus_milliseconds!(n): @ -! @milliseconds(n)

  :: Subtract the given microseconds from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_microseconds!` instead.
  :fun minus_microseconds(n): @ - @microseconds(n)

  :: Subtract the given microseconds from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_microseconds` instead.
  :fun minus_microseconds!(n): @ -! @microseconds(n)

  :: Subtract the given nanoseconds from this duration and return the result.
  ::
  :: Uses wrap-around overflow semantics if the result is more than `max_value`.
  :: If an error on overflow is desired, use `minus_nanoseconds!` instead.
  :fun minus_nanoseconds(n): @ - @nanoseconds(n)

  :: Subtract the given nanoseconds from this duration and return the result.
  ::
  :: Raises an error if the result would be more than `max_value`.
  :: If wrap-around overflow is desired, use `minus_nanoseconds` instead.
  :fun minus_nanoseconds!(n): @ -! @nanoseconds(n)
