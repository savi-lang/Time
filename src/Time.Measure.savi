:: A collection of functions relating to measuring intervals of time elapsed
:: during some portion of the program's execution.
:module Time.Measure
  :: Measure the interval in nanoseconds that elapse in the given yield block.
  :fun nanoseconds
    :yields None for None
    prior = @current_nanoseconds
    yield None
    @current_nanoseconds - prior

  :: Measure the interval in microseconds that elapse in the given yield block.
  :fun microseconds
    :yields None for None
    prior = @current_microseconds
    yield None
    @current_microseconds - prior

  :: Measure the interval in milliseconds that elapse in the given yield block.
  :fun milliseconds
    :yields None for None
    prior = @current_milliseconds
    yield None
    @current_milliseconds - prior

  :: Get the current monotonic non-adjusted nanosecond count.
  ::
  :: This number is not guaranteed to have any particular relationship to the
  :: current wall clock time - it is more likely to be related to system uptime,
  :: although there is no particular guarantee of that relationship either.
  :: For wall clock time, call `Time.now` instead.
  ::
  :: Being monotonic and non-adjusted, this is suitable for calculating
  :: time intervals using subtraction with wrap-around underflow semantics.
  :: That is, because the underlying count will wrap around on overflow,
  :: subtraction of two values across time should wrap around on underflow
  :: to properly account for the case of two values that straddle an overflow.
  :: See `nanoseconds` function for an example of how to measure time.
  ::
  :: This function is intended to be used for asynchronous timing measurements.
  :: For synchronous timing measurements, use the `nanoseconds` function,
  :: which handles the timing measurement for you around the given yield block.
  :fun current_nanoseconds U64
    case (
    | Platform.is_windows | _FFI.windows_subseconds(1000000000)
    | Platform.is_macos |
      // MacOS gives us a count of total uptime "ticks" since the OS booted.
      // We don't know how long a "tick" is without asking the operating system,
      // so we ask it for the timebase and multiple/divide to get nanoseconds.
      timebase = Pair(U32, U32).new(0, 0)
      timebase_res = _FFI.mach_timebase_info(stack_address_of_variable timebase)
      return 0 if timebase_res != 0
      _FFI.mach_absolute_time
      * timebase.first.u64
      / timebase.last.u64
    |
      // Other POSIX platforms give us the seconds since unix epoch and
      // nanoseconds as a pair, which we combine. We choose the monotonic clock.
      pair = Pair(USize, USize).new(0, 0)
      _FFI.clock_gettime(
        _FFI.ClockType.monotonic
        stack_address_of_variable pair
      )
      pair.first.u64 * 1000000000 + pair.last.u64
    )

  :: Get the current monotonic non-adjusted microsecond count.
  ::
  :: This number is not guaranteed to have any particular relationship to the
  :: current wall clock time - it is more likely to be related to system uptime,
  :: although there is no particular guarantee of that relationship either.
  :: For wall clock time, call `Time.now` instead.
  ::
  :: Being monotonic and non-adjusted, this is suitable for calculating
  :: time intervals using subtraction with wrap-around underflow semantics.
  :: That is, because the underlying count will wrap around on overflow,
  :: subtraction of two values across time should wrap around on underflow
  :: to properly account for the case of two values that straddle an overflow.
  :: See `microseconds` function for an example of how to measure time.
  ::
  :: This function is intended to be used for asynchronous timing measurements.
  :: For synchronous timing measurements, use the `microseconds` function,
  :: which handles the timing measurement for you around the given yield block.
  :fun current_microseconds U64
    case (
    | Platform.is_windows | _FFI.windows_subseconds(1000000)
    | Platform.is_macos |
      // MacOS gives us a count of total uptime "ticks" since the OS booted.
      // We don't know how long a "tick" is without asking the operating system,
      // so we ask it for the timebase and multiple/divide to get microseconds.
      timebase = Pair(U32, U32).new(0, 0)
      timebase_res = _FFI.mach_timebase_info(stack_address_of_variable timebase)
      return 0 if timebase_res != 0
      _FFI.mach_absolute_time
      * timebase.first.u64
      / (timebase.last.u64 * 1000)
    |
      // Other POSIX platforms give us the seconds since unix epoch and
      // nanoseconds as a pair, which we combine. We choose the monotonic clock.
      pair = Pair(USize, USize).new(0, 0)
      _FFI.clock_gettime(
        _FFI.ClockType.monotonic
        stack_address_of_variable pair
      )
      pair.first.u64 * 1000000 + pair.last.u64 / 1000
    )

  :: Get the current monotonic non-adjusted millisecond count.
  ::
  :: This number is not guaranteed to have any particular relationship to the
  :: current wall clock time - it is more likely to be related to system uptime,
  :: although there is no particular guarantee of that relationship either.
  :: For wall clock time, call `Time.now` instead.
  ::
  :: Being monotonic and non-adjusted, this is suitable for calculating
  :: time intervals using subtraction with wrap-around underflow semantics.
  :: That is, because the underlying count will wrap around on overflow,
  :: subtraction of two values across time should wrap around on underflow
  :: to properly account for the case of two values that straddle an overflow.
  :: See `milliseconds` function for an example of how to measure time.
  ::
  :: This function is intended to be used for asynchronous timing measurements.
  :: For synchronous timing measurements, use the `milliseconds` function,
  :: which handles the timing measurement for you around the given yield block.
  :fun current_milliseconds U64
    case (
    | Platform.is_windows | _FFI.windows_subseconds(1000)
    | Platform.is_macos |
      // MacOS gives us a count of total uptime "ticks" since the OS booted.
      // We don't know how long a "tick" is without asking the operating system,
      // so we ask it for the timebase and multiple/divide to get milliseconds.
      timebase = Pair(U32, U32).new(0, 0)
      timebase_res = _FFI.mach_timebase_info(stack_address_of_variable timebase)
      return 0 if timebase_res != 0
      _FFI.mach_absolute_time
      * timebase.first.u64
      / (timebase.last.u64 * 1000000)
    |
      // Other POSIX platforms give us the seconds since unix epoch and
      // nanoseconds as a pair, which we combine. We choose the monotonic clock.
      pair = Pair(USize, USize).new(0, 0)
      _FFI.clock_gettime(
        _FFI.ClockType.monotonic
        stack_address_of_variable pair
      )
      pair.first.u64 * 1000 + pair.last.u64 / 1000000
    )
